// Code generated by mockery v1.0.0
package mocks

import core "github.com/sc2nomore/tic-tac-go/core"
import mock "github.com/stretchr/testify/mock"

// Game is an autogenerated mock type for the Game type
type Game struct {
	mock.Mock
}

// GameBoard provides a mock function with given fields:
func (_m *Game) GameBoard() core.Board {
	ret := _m.Called()

	var r0 core.Board
	if rf, ok := ret.Get(0).(func() core.Board); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Board)
		}
	}

	return r0
}

// GamePlayers provides a mock function with given fields:
func (_m *Game) GamePlayers() core.PlayerMapper {
	ret := _m.Called()

	var r0 core.PlayerMapper
	if rf, ok := ret.Get(0).(func() core.PlayerMapper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.PlayerMapper)
		}
	}

	return r0
}

// GetMove provides a mock function with given fields:
func (_m *Game) GetMove() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MakeMove provides a mock function with given fields: move
func (_m *Game) MakeMove(move int) error {
	ret := _m.Called(move)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(move)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
