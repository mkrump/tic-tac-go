// Code generated by mockery v1.0.0
package mocks

import core "github.com/sc2nomore/tic-tac-go/core"

import mock "github.com/stretchr/testify/mock"

// StartupMenu is an autogenerated mock type for the StartupMenu type
type StartupMenu struct {
	mock.Mock
}

// PlayerSymbolPrompt provides a mock function with given fields:
func (_m *StartupMenu) PlayerSymbolPrompt() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlayerTypePrompt provides a mock function with given fields:
func (_m *StartupMenu) PlayerTypePrompt() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectPlayerType provides a mock function with given fields: _a0, _a1
func (_m *StartupMenu) SelectPlayerType(_a0 string, _a1 string) (core.Player, error) {
	ret := _m.Called(_a0, _a1)

	var r0 core.Player
	if rf, ok := ret.Get(0).(func(string, string) core.Player); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Player)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
