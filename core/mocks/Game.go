// Code generated by mockery v1.0.0
package mocks

import (
	"github.com/stretchr/testify/mock"
	"github.com/sc2nomore/tic-tac-go/core/boards"
	"github.com/sc2nomore/tic-tac-go/core/playertypes"
)

// Game is an autogenerated mock type for the Game type
type Game struct {
	mock.Mock
}

// Board provides a mock function with given fields:
func (_m *Game) Board() boards.Board {
	ret := _m.Called()

	var r0 boards.Board
	if rf, ok := ret.Get(0).(func() boards.Board); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(boards.Board)
		}
	}

	return r0
}

// GetMove provides a mock function with given fields:
func (_m *Game) GetMove() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// IsTie provides a mock function with given fields:
func (_m *Game) IsTie() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsWin provides a mock function with given fields:
func (_m *Game) IsWin() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MakeMove provides a mock function with given fields: _a0
func (_m *Game) MakeMove(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Players provides a mock function with given fields:
func (_m *Game) Players() playertypes.PlayerMap {
	ret := _m.Called()

	var r0 playertypes.PlayerMap
	if rf, ok := ret.Get(0).(func() playertypes.PlayerMap); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(playertypes.PlayerMap)
	}

	return r0
}
